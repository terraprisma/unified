--- decompiled/TerrariaClientWindows/Terraria/Main.cs
+++ decompiled/TerrariaClientMac/Terraria/Main.cs
@@ -26,6 +_,7 @@
 using ReLogic.OS;
 using ReLogic.Peripherals.RGB;
 using ReLogic.Utilities;
+using SDL2;
 using Terraria.Achievements;
 using Terraria.Audio;
 using Terraria.Chat;
@@ -1946,17 +_,17 @@
 
 	public static string CloudPlayerPath = "players";
 
-	public static Preferences Configuration = new Preferences(SavePath + Path.DirectorySeparatorChar + "config.json");
+	public static Preferences Configuration;
 
-	public static Preferences InputProfiles = new Preferences(SavePath + Path.DirectorySeparatorChar + "input profiles.json");
+	public static Preferences InputProfiles;
 
 	public static KeyboardState inputText;
 
 	public static KeyboardState oldInputText;
 
-	public static int PendingResolutionWidth = 800;
+	public static int PendingResolutionWidth;
 
-	public static int PendingResolutionHeight = 600;
+	public static int PendingResolutionHeight;
 
 	public static bool PendingBorderlessState;
 
@@ -1974,7 +_,7 @@
 
 	public static bool invasionProgressNearInvasion;
 
-	public static int invasionProgressMode = 2;
+	public static int invasionProgressMode;
 
 	public static int invasionProgressIcon;
 
@@ -1988,97 +_,27 @@
 
 	public static float invasionProgressAlpha;
 
-	public static bool HasInteractibleObjectThatIsNotATile = false;
+	public static bool HasInteractibleObjectThatIsNotATile;
 
 	public int currentNPCShowingChatBubble = -1;
 
-	public static int[] npcFrameCount = new int[688] {
-		1, 2, 2, 3, 6, 2, 2, 1, 1, 1,
-		1, 1, 1, 1, 1, 1, 2, 25, 23, 25,
-		21, 15, 26, 2, 10, 1, 16, 16, 16, 3,
-		1, 15, 3, 1, 3, 1, 1, 21, 25, 1,
-		1, 1, 3, 3, 15, 3, 7, 7, 6, 5,
-		6, 5, 3, 3, 23, 6, 3, 6, 6, 2,
-		5, 6, 5, 7, 7, 4, 5, 8, 1, 5,
-		1, 2, 4, 16, 5, 4, 4, 15, 16, 16,
-		16, 2, 4, 6, 6, 18, 16, 1, 1, 1,
-		1, 1, 1, 4, 3, 1, 1, 1, 1, 1,
-		1, 5, 6, 7, 16, 1, 1, 25, 23, 12,
-		20, 21, 1, 2, 2, 3, 6, 1, 1, 1,
-		15, 4, 11, 1, 23, 6, 6, 6, 1, 2,
-		2, 1, 3, 4, 1, 2, 1, 4, 2, 1,
-		15, 3, 25, 4, 5, 7, 3, 2, 12, 12,
-		4, 4, 4, 8, 8, 13, 5, 6, 4, 15,
-		23, 3, 15, 8, 5, 4, 13, 15, 12, 4,
-		14, 14, 3, 2, 5, 3, 2, 3, 23, 5,
-		14, 16, 5, 2, 2, 12, 3, 3, 3, 3,
-		2, 2, 2, 2, 2, 7, 14, 15, 16, 8,
-		3, 15, 15, 16, 2, 3, 20, 25, 23, 26,
-		4, 4, 16, 16, 20, 20, 20, 2, 2, 2,
-		2, 8, 12, 3, 4, 2, 4, 25, 26, 26,
-		6, 3, 3, 3, 3, 3, 5, 4, 4, 5,
-		4, 6, 7, 15, 4, 7, 6, 1, 1, 2,
-		4, 3, 5, 3, 3, 3, 4, 5, 6, 4,
-		2, 1, 8, 4, 4, 1, 8, 1, 4, 15,
-		15, 15, 15, 15, 15, 16, 15, 15, 15, 15,
-		15, 3, 3, 3, 3, 3, 3, 16, 3, 6,
-		12, 21, 21, 20, 16, 15, 15, 5, 5, 6,
-		6, 5, 2, 7, 2, 6, 6, 6, 6, 6,
-		15, 15, 15, 15, 15, 11, 4, 2, 2, 3,
-		3, 3, 16, 15, 16, 10, 14, 12, 1, 10,
-		8, 3, 3, 2, 2, 2, 2, 7, 15, 15,
-		15, 6, 3, 10, 10, 6, 9, 8, 9, 8,
-		20, 10, 6, 23, 1, 4, 24, 2, 4, 6,
-		6, 13, 15, 15, 15, 15, 4, 4, 26, 23,
-		8, 2, 4, 4, 4, 4, 2, 2, 4, 12,
-		12, 9, 9, 9, 1, 9, 11, 2, 2, 9,
-		5, 6, 4, 18, 8, 11, 1, 4, 5, 8,
-		4, 1, 1, 1, 1, 4, 2, 5, 4, 11,
-		5, 11, 1, 1, 1, 10, 10, 15, 8, 17,
-		6, 6, 1, 12, 12, 13, 15, 9, 5, 10,
-		7, 7, 7, 7, 7, 7, 7, 4, 4, 16,
-		16, 25, 5, 7, 3, 13, 2, 6, 2, 19,
-		19, 19, 20, 26, 3, 1, 1, 1, 1, 1,
-		16, 21, 9, 16, 7, 6, 18, 13, 20, 12,
-		12, 20, 6, 14, 14, 14, 14, 6, 1, 3,
-		25, 19, 20, 22, 2, 4, 4, 4, 11, 9,
-		8, 1, 9, 1, 8, 8, 12, 12, 11, 11,
-		11, 11, 11, 11, 11, 11, 11, 1, 6, 9,
-		1, 1, 1, 1, 1, 1, 4, 1, 10, 1,
-		8, 4, 1, 5, 8, 8, 8, 8, 9, 9,
-		5, 4, 8, 16, 8, 2, 3, 3, 6, 6,
-		7, 13, 4, 4, 4, 4, 1, 1, 1, 8,
-		25, 11, 14, 14, 14, 17, 17, 17, 5, 5,
-		5, 14, 14, 14, 9, 9, 9, 9, 17, 17,
-		16, 16, 18, 18, 10, 10, 10, 10, 4, 1,
-		6, 9, 6, 4, 4, 4, 14, 4, 25, 13,
-		3, 7, 6, 6, 1, 4, 4, 4, 4, 4,
-		4, 4, 15, 15, 8, 8, 2, 6, 15, 15,
-		6, 13, 5, 5, 7, 5, 14, 14, 4, 6,
-		21, 1, 1, 1, 11, 12, 6, 6, 17, 6,
-		16, 21, 16, 23, 5, 16, 2, 28, 28, 6,
-		6, 6, 6, 6, 6, 6, 7, 7, 7, 7,
-		7, 7, 7, 3, 4, 6, 27, 16, 2, 2,
-		4, 3, 4, 23, 6, 1, 1, 2, 8, 8,
-		14, 6, 6, 6, 6, 6, 2, 4, 14, 14,
-		14, 14, 14, 14, 14, 1, 1, 13
-	};
+	public static int[] npcFrameCount;
 
-	public static Dictionary<int, byte> npcLifeBytes = new Dictionary<int, byte>();
+	public static Dictionary<int, byte> npcLifeBytes;
 
 	public static bool mouseExit;
 
-	public static float exitScale = 0.8f;
+	public static float exitScale;
 
 	public static bool mouseReforge;
 
-	public static float reforgeScale = 0.8f;
+	public static float reforgeScale;
 
-	public static Player clientPlayer = new Player();
+	public static Player clientPlayer;
 
-	public static string getIP = defaultIP;
+	public static string getIP;
 
-	public static string getPort = Convert.ToString(Netplay.ListenPort);
+	public static string getPort;
 
 	public static bool menuMultiplayer;
 
@@ -2098,47 +_,47 @@
 
 	public static int lastItemUpdate;
 
-	public static int maxNPCUpdates = 5;
+	public static int maxNPCUpdates;
 
-	public static int maxItemUpdates = 5;
+	public static int maxItemUpdates;
 
-	public static string cUp = "W";
+	public static string cUp;
 
-	public static string cLeft = "A";
+	public static string cLeft;
 
-	public static string cDown = "S";
+	public static string cDown;
 
-	public static string cRight = "D";
+	public static string cRight;
 
-	public static string cJump = "Space";
+	public static string cJump;
 
-	public static string cThrowItem = "T";
+	public static string cThrowItem;
 
-	public static string cHeal = "H";
+	public static string cHeal;
 
-	public static string cMana = "J";
+	public static string cMana;
 
-	public static string cBuff = "B";
+	public static string cBuff;
 
-	public static string cHook = "E";
+	public static string cHook;
 
-	public static string cTorch = "LeftShift";
+	public static string cTorch;
 
-	public static string cInv = "Escape";
+	public static string cInv;
 
-	public static string cSmart = "LeftControl";
+	public static string cSmart;
 
-	public static string cMount = "R";
+	public static string cMount;
 
-	public static string cFavoriteKey = "LeftAlt";
+	public static string cFavoriteKey;
 
-	public static bool cSmartCursorModeIsToggleAndNotHold = true;
+	public static bool cSmartCursorModeIsToggleAndNotHold;
 
-	public static bool SmartCursorWanted_Mouse = false;
+	public static bool SmartCursorWanted_Mouse;
 
-	public static bool SmartCursorWanted_GamePad = false;
+	public static bool SmartCursorWanted_GamePad;
 
-	public static bool SmartCursorShowing = false;
+	public static bool SmartCursorShowing;
 
 	public static int SmartCursorX;
 
@@ -2158,45 +_,45 @@
 
 	public static bool SmartInteractPotionOfReturn;
 
-	public static List<Microsoft.Xna.Framework.Point> SmartInteractTileCoords = new List<Microsoft.Xna.Framework.Point>();
+	public static List<Microsoft.Xna.Framework.Point> SmartInteractTileCoords;
 
-	public static List<Microsoft.Xna.Framework.Point> SmartInteractTileCoordsSelected = new List<Microsoft.Xna.Framework.Point>();
+	public static List<Microsoft.Xna.Framework.Point> SmartInteractTileCoordsSelected;
 
-	public static int TileInteractionLX = -1;
+	public static int TileInteractionLX;
 
-	public static int TileInteractionLY = -1;
+	public static int TileInteractionLY;
 
-	public static int TileInteractionHX = -1;
+	public static int TileInteractionHX;
 
-	public static int TileInteractionHY = -1;
+	public static int TileInteractionHY;
 
-	public static int cursorOverride = -1;
+	public static int cursorOverride;
 
-	public static int signHover = -1;
+	public static int signHover;
 
-	public static string cMapZoomIn = "Add";
+	public static string cMapZoomIn;
 
-	public static string cMapZoomOut = "Subtract";
+	public static string cMapZoomOut;
 
-	public static string cMapAlphaUp = "PageUp";
+	public static string cMapAlphaUp;
 
-	public static string cMapAlphaDown = "PageDown";
+	public static string cMapAlphaDown;
 
-	public static string cMapFull = "M";
+	public static string cMapFull;
 
-	public static string cMapStyle = "Tab";
+	public static string cMapStyle;
 
-	public static Microsoft.Xna.Framework.Input.Keys FavoriteKey = Microsoft.Xna.Framework.Input.Keys.LeftAlt;
+	public static Microsoft.Xna.Framework.Input.Keys FavoriteKey;
 
-	public static ColorSlidersSet mouseColorSlider = new ColorSlidersSet();
+	public static ColorSlidersSet mouseColorSlider;
 
-	public static ColorSlidersSet mouseBorderColorSlider = new ColorSlidersSet();
+	public static ColorSlidersSet mouseBorderColorSlider;
 
-	public static Microsoft.Xna.Framework.Color mouseColor = new Microsoft.Xna.Framework.Color(255, 50, 95);
+	public static Microsoft.Xna.Framework.Color mouseColor;
 
-	public static Microsoft.Xna.Framework.Color cursorColor = Microsoft.Xna.Framework.Color.White;
+	public static Microsoft.Xna.Framework.Color cursorColor;
 
-	public static int cursorColorDirection = 1;
+	public static int cursorColorDirection;
 
 	public static float cursorAlpha;
 
@@ -2204,17 +_,17 @@
 
 	public static bool signBubble;
 
-	public static int signX = 0;
+	public static int signX;
 
-	public static int signY = 0;
+	public static int signY;
 
 	public static bool hideUI;
 
 	public static bool releaseUI;
 
-	public static FrameSkipMode FrameSkipMode = FrameSkipMode.Subtle;
+	public static FrameSkipMode FrameSkipMode;
 
-	public static bool terrariasFixedTiming = true;
+	public static bool terrariasFixedTiming;
 
 	private int splashCounter;
 
@@ -2238,9 +_,9 @@
 
 	public List<int> DrawCacheFirstFractals = new List<int>(1000);
 
-	public static ParticleRenderer ParticleSystem_World_OverPlayers = new ParticleRenderer();
+	public static ParticleRenderer ParticleSystem_World_OverPlayers;
 
-	public static ParticleRenderer ParticleSystem_World_BehindPlayers = new ParticleRenderer();
+	public static ParticleRenderer ParticleSystem_World_BehindPlayers;
 
 	private static WindowStateController _windowMover;
 
@@ -2252,19 +_,19 @@
 
 	public static PlayerResourceSetsManager ResourceSetsManager;
 
-	private static bool shouldSetDefaultUIScale = true;
+	private static bool shouldSetDefaultUIScale;
 
-	private static float newDefaultUIScale = 0f;
+	private static float newDefaultUIScale;
 
 	public static bool IsInTheMiddleOfLoadingSettings;
 
 	public static Microsoft.Xna.Framework.Point LastLoadedResolution;
 
-	public static bool startFullscreen = false;
+	public static bool startFullscreen;
 
-	public static string oldStatusText = "";
+	public static string oldStatusText;
 
-	public static string autoGenFileLocation = null;
+	public static string autoGenFileLocation;
 
 	public static bool autoShutdown;
 
@@ -2278,59 +_,59 @@
 
 	public static int moondialCooldown;
 
-	private static Stopwatch splashTimer = new Stopwatch();
+	private static Stopwatch splashTimer;
 
 	public static GeneralIssueReporter IssueReporter;
 
 	private JArray _lastLoadedPacks;
 
-	public static bool PreventUpdatingTargets = true;
+	public static bool PreventUpdatingTargets;
 
 	private IEnumerator _gameContentLoadProcess;
 
-	public static bool _shouldUseWindyDayMusic = false;
+	public static bool _shouldUseWindyDayMusic;
 
-	public static bool _shouldUseStormMusic = false;
+	public static bool _shouldUseStormMusic;
 
 	private int lastMusicPlayed = -1;
 
 	private bool playOldTile;
 
-	private static float _minWind = 0.34f;
+	private static float _minWind;
 
-	private static float _maxWind = 0.4f;
+	private static float _maxWind;
 
-	private static float _minRain = 0.4f;
+	private static float _minRain;
 
-	private static float _maxRain = 0.5f;
+	private static float _maxRain;
 
-	public static float ambientWaterfallX = -1f;
+	public static float ambientWaterfallX;
 
-	public static float ambientWaterfallY = -1f;
+	public static float ambientWaterfallY;
 
-	public static float ambientWaterfallStrength = 0f;
+	public static float ambientWaterfallStrength;
 
-	public static float ambientLavafallX = -1f;
+	public static float ambientLavafallX;
 
-	public static float ambientLavafallY = -1f;
+	public static float ambientLavafallY;
 
-	public static float ambientLavafallStrength = 0f;
+	public static float ambientLavafallStrength;
 
-	public static float ambientLavaX = -1f;
+	public static float ambientLavaX;
 
-	public static float ambientLavaY = -1f;
+	public static float ambientLavaY;
 
 	public static float ambientLavaStrength;
 
 	public static int ambientCounter;
 
-	private static bool _isWaterfallMusicPlaying = false;
+	private static bool _isWaterfallMusicPlaying;
 
-	private static bool _isLavafallMusicPlaying = false;
+	private static bool _isLavafallMusicPlaying;
 
-	public static IChatMonitor chatMonitor = new RemadeChatMonitor();
+	public static IChatMonitor chatMonitor;
 
-	public static int ProjectileUpdateLoopIndex = -1;
+	public static int ProjectileUpdateLoopIndex;
 
 	public static GameTipsDisplay gameTips;
 
@@ -2340,7 +_,7 @@
 
 	public ChumBucketProjectileHelper ChumBucketProjectileHelper = new ChumBucketProjectileHelper();
 
-	public static int weatherVaneBobframe = 0;
+	public static int weatherVaneBobframe;
 
 	private float logoRotation;
 
@@ -2354,7 +_,7 @@
 
 	private float logoScaleSpeed = 1f;
 
-	private static int maxMenuItems = 16;
+	private static int maxMenuItems;
 
 	private float[] menuItemScale = new float[maxMenuItems];
 
@@ -2364,7 +_,7 @@
 
 	private int selectedMenu2 = -1;
 
-	public static int selectedPlayer = 0;
+	public static int selectedPlayer;
 
 	public static int selectedWorld;
 
@@ -2372,9 +_,9 @@
 
 	public static int menuSkip;
 
-	private static bool _needsLanguageSelect = true;
+	private static bool _needsLanguageSelect;
 
-	private static Item tooltipPrefixComparisonItem = new Item();
+	private static Item tooltipPrefixComparisonItem;
 
 	private MouseTextCache _mouseTextCache;
 
@@ -2382,13 +_,13 @@
 
 	public int textBlinkerState;
 
-	public static string newWorldName = "";
-
-	private static Vector3 shimmerShine = new Vector3(1f, 0.5f, 1f);
-
-	private static int[] specX = new int[1000];
-
-	private static int[] specY = new int[1000];
+	public static string newWorldName;
+
+	private static Vector3 shimmerShine;
+
+	private static int[] specX;
+
+	private static int[] specY;
 
 	public TilePaintSystemV2 TilePaintSystem;
 
@@ -2408,11 +_,11 @@
 
 	private List<DrawData> _voidLensDataSillouette2 = new List<DrawData>();
 
-	private static BlendState _multiplyBlendState = null;
+	private static BlendState _multiplyBlendState;
 
 	private static StardewValleyAnimation _stardewAnimation;
 
-	private static UnifiedRandom _tempSeededRandom = new UnifiedRandom();
+	private static UnifiedRandom _tempSeededRandom;
 
 	private TextDisplayCache _textDisplayCache = new TextDisplayCache();
 
@@ -2422,25 +_,25 @@
 
 	private bool _imeToggle;
 
-	private static int _lastHoveredLoadoutIndex = -1;
+	private static int _lastHoveredLoadoutIndex;
 
 	private List<int> _npcTypesThatAlreadyDrewAHead = new List<int>();
 
 	private int[] _npcIndexWhoHoldsHeadIndex = new int[NPCHeadID.Count];
 
-	private static List<string> _requiredObjecsForCraftingText = new List<string>();
+	private static List<string> _requiredObjecsForCraftingText;
 
 	private static bool _preventCraftingBecauseClickWasUsedToChangeFocusedRecipe;
 
-	private static int _currentRecipeBeingCrafted = -1;
+	private static int _currentRecipeBeingCrafted;
 
-	private static bool hidePVPIcons = false;
+	private static bool hidePVPIcons;
 
 	public static bool HoveringOverAnNPC;
 
-	public static string hoverItemName = "";
+	public static string hoverItemName;
 
-	public static Microsoft.Xna.Framework.Color inventoryBack = new Microsoft.Xna.Framework.Color(220, 220, 220, 220);
+	public static Microsoft.Xna.Framework.Color inventoryBack;
 
 	public static bool mouseText;
 
@@ -2456,7 +_,7 @@
 
 	public static int selClothes;
 
-	private static Microsoft.Xna.Framework.Color[] oldClothesColor = new Microsoft.Xna.Framework.Color[6];
+	private static Microsoft.Xna.Framework.Color[] oldClothesColor;
 
 	private static int oldClothesStyle;
 
@@ -2484,29 +_,29 @@
 
 	private static int _itemIconCacheTime;
 
-	private static bool _cannotDrawAccessoriesHorizontally = false;
+	private static bool _cannotDrawAccessoriesHorizontally;
 
-	public static Microsoft.Xna.Framework.Color selColor = Microsoft.Xna.Framework.Color.White;
+	public static Microsoft.Xna.Framework.Color selColor;
 
 	public static int focusColor;
 
 	public static int colorDelay;
 
-	public static int setKey = -1;
+	public static int setKey;
 
 	public static int bgScroll;
 
 	public static bool autoPass;
 
-	public static int menuFocus = 0;
+	public static int menuFocus;
 
-	public static float hBar = -1f;
+	public static float hBar;
 
-	public static float sBar = -1f;
+	public static float sBar;
 
-	public static float lBar = 1f;
+	public static float lBar;
 
-	public static float aBar = 1f;
+	public static float aBar;
 
 	private int grabColorSlider;
 
@@ -2516,11 +_,11 @@
 
 	private bool[] menuWide = new bool[100];
 
-	public static float GamepadCursorAlpha = 0f;
+	public static float GamepadCursorAlpha;
 
 	private bool _needsMenuUIRecalculation;
 
-	public static float MenuXMovement = 0f;
+	public static float MenuXMovement;
 
 	public RejectionMenuInfo RejectionMenuInfo;
 
@@ -2530,47 +_,47 @@
 
 	private float hellBlackBoxBottom;
 
-	public static float InitialMapScale = 1f;
+	public static float InitialMapScale;
 
-	public static float MapScale = 1f;
+	public static float MapScale;
 
-	private static int _minimapTopRightAnchorOffsetTowardsLeft = 52;
+	private static int _minimapTopRightAnchorOffsetTowardsLeft;
 
-	private static int _minimapTopRightAnchorOffsetTowardsBottom = 90;
+	private static int _minimapTopRightAnchorOffsetTowardsBottom;
 
-	public static bool cancelWormHole = false;
+	public static bool cancelWormHole;
 
-	private static VertexColors _glowPaintColors = new VertexColors(Microsoft.Xna.Framework.Color.White);
+	private static VertexColors _glowPaintColors;
 
 	protected List<Tuple<int, int, ushort>> DrawWiresSpecialTiles = new List<Tuple<int, int, ushort>>();
 
 	public static float lightning;
 
-	private static float lightningDecay = 1f;
+	private static float lightningDecay;
 
-	private static float lightningSpeed = 0f;
+	private static float lightningSpeed;
 
 	private static int thunderDelay;
 
 	public static int thunderDistance;
 
-	private static string[] MonolithFilterNames = new string[5] { "MonolithVortex", "MonolithNebula", "MonolithStardust", "MonolithSolar", "MonolithMoonLord" };
-
-	private static string[] MonolithSkyNames = new string[5] { "MonolithVortex", "MonolithNebula", "MonolithStardust", "MonolithSolar", "MonolithMoonLord" };
-
-	private static float backgroundLayerTransitionSpeed = 0.05f;
+	private static string[] MonolithFilterNames;
+
+	private static string[] MonolithSkyNames;
+
+	private static float backgroundLayerTransitionSpeed;
 
 	public static float atmo;
 
-	private static float bgScale = 1f;
+	private static float bgScale;
 
-	private static int bgWidthScaled = (int)(1024f * bgScale);
+	private static int bgWidthScaled;
 
 	public static Microsoft.Xna.Framework.Color ColorOfTheSkies;
 
-	private static Microsoft.Xna.Framework.Color ColorOfSurfaceBackgroundsBase = Microsoft.Xna.Framework.Color.White;
+	private static Microsoft.Xna.Framework.Color ColorOfSurfaceBackgroundsBase;
 
-	private static Microsoft.Xna.Framework.Color ColorOfSurfaceBackgroundsModified = Microsoft.Xna.Framework.Color.White;
+	private static Microsoft.Xna.Framework.Color ColorOfSurfaceBackgroundsModified;
 
 	private float screenOff;
 
@@ -2580,25 +_,25 @@
 
 	private bool _isDrawingOrUpdating;
 
-	public static List<INeedRenderTargetContent> ContentThatNeedsRenderTargets = new List<INeedRenderTargetContent>();
+	public static List<INeedRenderTargetContent> ContentThatNeedsRenderTargets;
 
-	private static bool _cameraPanHasBlackTransition = false;
+	private static bool _cameraPanHasBlackTransition;
 
 	public CameraModifierStack CameraModifiers = new CameraModifierStack();
 
-	public static bool starGame = false;
+	public static bool starGame;
 
-	public static int starsHit = 0;
+	public static int starsHit;
 
 	private static string _oldNetplayStatusText;
 
 	private static TextSnippet[] _netplayStatusTextSnippets;
 
-	public static int ladyBugRainBoost = 0;
+	public static int ladyBugRainBoost;
 
 	private static bool _canShowMeteorFall;
 
-	private static bool _isResizingAndRemakingTargets = false;
+	private static bool _isResizingAndRemakingTargets;
 
 	public static bool CanUpdateGameplay { get; private set; }
 
@@ -3609,10 +_,14 @@
 	protected void OpenRecent()
 	{
 		try {
+			string savePath = SavePath;
+			char directorySeparatorChar = Path.DirectorySeparatorChar;
-			if (!File.Exists(SavePath + Path.DirectorySeparatorChar + "servers.dat")) {
+			if (!File.Exists(savePath + directorySeparatorChar + "servers.dat")) {
 				return;
 			}
+			string savePath2 = SavePath;
+			directorySeparatorChar = Path.DirectorySeparatorChar;
-			using FileStream input = new FileStream(SavePath + Path.DirectorySeparatorChar + "servers.dat", FileMode.Open);
+			using FileStream input = new FileStream(savePath2 + directorySeparatorChar + "servers.dat", FileMode.Open);
 			using BinaryReader binaryReader = new BinaryReader(input);
 			binaryReader.ReadInt32();
 			for (int i = 0; i < 10; i++) {
@@ -3628,11 +_,15 @@
 	{
 		Utils.TryCreatingDirectory(SavePath);
 		try {
+			string savePath = SavePath;
+			char directorySeparatorChar = Path.DirectorySeparatorChar;
-			File.SetAttributes(SavePath + Path.DirectorySeparatorChar + "servers.dat", FileAttributes.Normal);
+			File.SetAttributes(savePath + directorySeparatorChar + "servers.dat", FileAttributes.Normal);
 		} catch {
 		}
 		try {
+			string savePath2 = SavePath;
+			char directorySeparatorChar = Path.DirectorySeparatorChar;
-			using FileStream output = new FileStream(SavePath + Path.DirectorySeparatorChar + "servers.dat", FileMode.Create);
+			using FileStream output = new FileStream(savePath2 + directorySeparatorChar + "servers.dat", FileMode.Create);
 			using BinaryWriter binaryWriter = new BinaryWriter(output);
 			binaryWriter.Write(279);
 			for (int i = 0; i < 10; i++) {
@@ -3767,10 +_,14 @@
 
 	protected void LoadSettings()
 	{
+		string savePath = SavePath;
+		char directorySeparatorChar = Path.DirectorySeparatorChar;
-		if (File.Exists(SavePath + Path.DirectorySeparatorChar + "config.dat")) {
+		if (File.Exists(savePath + directorySeparatorChar + "config.dat")) {
 			OpenLegacySettings();
 			if (SaveSettings()) {
+				string savePath2 = SavePath;
+				directorySeparatorChar = Path.DirectorySeparatorChar;
-				File.Delete(SavePath + Path.DirectorySeparatorChar + "config.dat");
+				File.Delete(savePath2 + directorySeparatorChar + "config.dat");
 			}
 			return;
 		}
@@ -3792,7 +_,7 @@
 		PendingBorderlessState = screenBorderless;
 		screenBorderlessPendingResizes = (screenBorderless ? 6 : 0);
 		if (Platform.IsWindows && !dedServ) {
-			Form form = (Form)Control.FromHandle(instance.Window.Handle);
+			Form form = Control.FromHandle(instance.Window.Handle);
 			if (screenBorderless) {
 				SetBorderlessFormStyle(form);
 			} else if (screenMaximized) {
@@ -4058,10 +_,14 @@
 	protected void OpenLegacySettings()
 	{
 		try {
+			string savePath = SavePath;
+			char directorySeparatorChar = Path.DirectorySeparatorChar;
-			if (!File.Exists(SavePath + Path.DirectorySeparatorChar + "config.dat")) {
+			if (!File.Exists(savePath + directorySeparatorChar + "config.dat")) {
 				return;
 			}
+			string savePath2 = SavePath;
+			directorySeparatorChar = Path.DirectorySeparatorChar;
-			using FileStream input = new FileStream(SavePath + Path.DirectorySeparatorChar + "config.dat", FileMode.Open);
+			using FileStream input = new FileStream(savePath2 + directorySeparatorChar + "config.dat", FileMode.Open);
 			using BinaryReader binaryReader = new BinaryReader(input);
 			int num = binaryReader.ReadInt32();
 			if (num >= 68) {
@@ -4099,7 +_,7 @@
 					terrariasFixedTiming = binaryReader.ReadBoolean();
 				}
 				if (num >= 91 && binaryReader.ReadBoolean() && !dedServ && Platform.IsWindows) {
-					((Form)Control.FromHandle(base.Window.Handle)).WindowState = FormWindowState.Maximized;
+					Control.FromHandle(base.Window.Handle).WindowState = FormWindowState.Maximized;
 				}
 				if (num >= 4) {
 					int width = binaryReader.ReadInt32();
@@ -4204,17 +_,29 @@
 			text += ((!invalidFileNameChars.Contains(c)) ? ((c != ' ') ? c : '_') : '-');
 		}
 		string text2 = (cloudSave ? CloudPlayerPath : PlayerPath);
+		char directorySeparatorChar = Path.DirectorySeparatorChar;
-		if (FileUtilities.GetFullPath(text2 + Path.DirectorySeparatorChar + text + ".plr", cloudSave).StartsWith("\\\\.\\", StringComparison.Ordinal)) {
+		if (FileUtilities.GetFullPath(text2 + directorySeparatorChar + text + ".plr", cloudSave).StartsWith("\\\\.\\", StringComparison.Ordinal)) {
 			text += "_";
 		}
+		directorySeparatorChar = Path.DirectorySeparatorChar;
-		if (FileUtilities.Exists(text2 + Path.DirectorySeparatorChar + text + ".plr", cloudSave)) {
+		if (FileUtilities.Exists(text2 + directorySeparatorChar + text + ".plr", cloudSave)) {
 			int num = 2;
-			while (FileUtilities.Exists(text2 + Path.DirectorySeparatorChar.ToString() + text + num + ".plr", cloudSave)) {
+			while (true) {
+				object[] obj = new object[5] { text2, null, null, null, null };
+				directorySeparatorChar = Path.DirectorySeparatorChar;
+				obj[1] = directorySeparatorChar.ToString();
+				obj[2] = text;
+				obj[3] = num;
+				obj[4] = ".plr";
+				if (!FileUtilities.Exists(string.Concat(obj), cloudSave)) {
+					break;
+				}
 				num++;
 			}
 			text += num;
 		}
+		directorySeparatorChar = Path.DirectorySeparatorChar;
-		return text2 + Path.DirectorySeparatorChar + text + ".plr";
+		return text2 + directorySeparatorChar + text + ".plr";
 	}
 
 	public static string GetWorldPathFromName(string worldName, bool cloudSave)
@@ -4227,17 +_,29 @@
 		text = text.Replace(".", "_");
 		text = text.Replace("*", "_");
 		string text2 = (cloudSave ? CloudWorldPath : WorldPath);
+		char directorySeparatorChar = Path.DirectorySeparatorChar;
-		if (FileUtilities.GetFullPath(text2 + Path.DirectorySeparatorChar + text + ".wld", cloudSave).StartsWith("\\\\.\\", StringComparison.Ordinal)) {
+		if (FileUtilities.GetFullPath(text2 + directorySeparatorChar + text + ".wld", cloudSave).StartsWith("\\\\.\\", StringComparison.Ordinal)) {
 			text += "_";
 		}
+		directorySeparatorChar = Path.DirectorySeparatorChar;
-		if (FileUtilities.Exists(text2 + Path.DirectorySeparatorChar + text + ".wld", cloudSave)) {
+		if (FileUtilities.Exists(text2 + directorySeparatorChar + text + ".wld", cloudSave)) {
 			int num = 2;
-			while (FileUtilities.Exists(text2 + Path.DirectorySeparatorChar.ToString() + text + num + ".wld", cloudSave)) {
+			while (true) {
+				object[] obj = new object[5] { text2, null, null, null, null };
+				directorySeparatorChar = Path.DirectorySeparatorChar;
+				obj[1] = directorySeparatorChar.ToString();
+				obj[2] = text;
+				obj[3] = num;
+				obj[4] = ".wld";
+				if (!FileUtilities.Exists(string.Concat(obj), cloudSave)) {
+					break;
+				}
 				num++;
 			}
 			text += num;
 		}
+		directorySeparatorChar = Path.DirectorySeparatorChar;
-		return text2 + Path.DirectorySeparatorChar + text + ".wld";
+		return text2 + directorySeparatorChar + text + ".wld";
 	}
 
 	public void setServerWorldRollbacks(string rollBacksToKeep)
@@ -9501,8 +_,8 @@
 			if (dedServ) {
 				return;
 			}
-			bool flag = base.IsActive;
+			bool isActive = base.IsActive;
-			if (!flag) {
+			if (!isActive) {
 				audioSystem.PauseAll();
 				SoundEngine.StopAmbientSounds();
 			} else {
@@ -9847,7 +_,7 @@
 						if (remixWorld) {
 							if (cloudAlpha > 0f && (double)(player[myPlayer].position.Y / 16f) > rockLayer && player[myPlayer].position.Y / 16f < (float)(maxTilesY - 350) && !player[myPlayer].ZoneSnow && !player[myPlayer].ZoneDungeon) {
 								float trackVolume5 = musicFade[i];
-								audioSystem.UpdateAmbientCueState(i, flag, ref trackVolume5, ambientVolume * num8);
+								audioSystem.UpdateAmbientCueState(i, isActive, ref trackVolume5, ambientVolume * num8);
 								musicFade[i] = trackVolume5;
 							} else {
 								float trackVolume6 = musicFade[i];
@@ -9856,7 +_,7 @@
 							}
 						} else if (cloudAlpha > 0f && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2) && !player[myPlayer].ZoneSnow) {
 							float trackVolume7 = musicFade[i];
-							audioSystem.UpdateAmbientCueState(i, flag, ref trackVolume7, ambientVolume * num8);
+							audioSystem.UpdateAmbientCueState(i, isActive, ref trackVolume7, ambientVolume * num8);
 							musicFade[i] = trackVolume7;
 						} else {
 							float trackVolume8 = musicFade[i];
@@ -9880,7 +_,7 @@
 						if (remixWorld) {
 							if (!gameMenu && Math.Abs(windSpeedCurrent) >= num6 / 50f && (double)(player[myPlayer].position.Y / 16f) > rockLayer && player[myPlayer].position.Y / 16f < (float)(maxTilesY - 350) && !player[myPlayer].ZoneDungeon) {
 								float trackVolume = musicFade[i];
-								audioSystem.UpdateAmbientCueState(i, flag, ref trackVolume, ambientVolume * num5);
+								audioSystem.UpdateAmbientCueState(i, isActive, ref trackVolume, ambientVolume * num5);
 								musicFade[i] = trackVolume;
 							} else {
 								float trackVolume2 = musicFade[i];
@@ -9889,7 +_,7 @@
 							}
 						} else if (!gameMenu && Math.Abs(windSpeedCurrent) >= num6 / 50f && (double)player[myPlayer].position.Y < worldSurface * 16.0 + (double)(screenHeight / 2)) {
 							float trackVolume3 = musicFade[i];
-							audioSystem.UpdateAmbientCueState(i, flag, ref trackVolume3, ambientVolume * num5);
+							audioSystem.UpdateAmbientCueState(i, isActive, ref trackVolume3, ambientVolume * num5);
 							musicFade[i] = trackVolume3;
 						} else {
 							float trackVolume4 = musicFade[i];
@@ -9901,7 +_,7 @@
 					default: {
 						float tempFade = musicFade[i];
 						if (i == curMusic) {
-							audioSystem.UpdateCommonTrack(flag, i, num2, ref tempFade);
+							audioSystem.UpdateCommonTrack(isActive, i, num2, ref tempFade);
 						} else {
 							audioSystem.UpdateCommonTrackTowardStopping(i, num2, ref tempFade, isMainTrackAudible);
 						}
@@ -13581,7 +_,7 @@
 			UpdateOldNPCShop();
 			hasFocus = base.IsActive;
 			if (Platform.IsWindows) {
-				Form form = Control.FromHandle(base.Window.Handle) as Form;
+				Form form = Control.FromHandle(base.Window.Handle);
 				bool num3 = form.WindowState == FormWindowState.Minimized;
 				bool flag = Form.ActiveForm == form;
 				hasFocus |= flag;
@@ -13650,7 +_,7 @@
 		if (netMode == 2) {
 			cloudAlpha = maxRaining;
 		}
-		bool flag2 = base.IsActive;
+		bool isActive = base.IsActive;
 		if (netMode == 1) {
 			TrySyncingMyPlayer();
 		}
@@ -13670,7 +_,7 @@
 		if (LocalGolfState != null) {
 			LocalGolfState.Update();
 		}
-		if ((flag2 || netMode == 1) && cloudAlpha > 0f) {
+		if ((isActive || netMode == 1) && cloudAlpha > 0f) {
 			Rain.MakeRain();
 		}
 		if (netMode != 1) {
@@ -37294,6 +_,7 @@
 		}
 		Assets.TransferCompletedAssets();
 		Exit();
+		SDL.SDL_DestroyWindow(base.Window.Handle);
 	}
 
 	private void Main_Exiting(object sender, EventArgs e)
@@ -46171,7 +_,7 @@
 	public void UpdateWeather(GameTime gameTime, int currentDayRateIteration)
 	{
 		if (netMode != 2 && currentDayRateIteration == 0) {
-			bool flag = base.IsActive;
+			bool isActive = base.IsActive;
 			if (thunderDelay > 0) {
 				thunderDelay--;
 				if (thunderDelay == 0) {
@@ -46185,7 +_,7 @@
 					if (center.Y > (float)num2) {
 						center.Y = num2;
 					}
-					if (flag) {
+					if (isActive) {
 						SoundEngine.PlaySound(43, center);
 					}
 				}
@@ -49755,7 +_,7 @@
 
 	private void DrawRainInMenu()
 	{
-		bool flag = base.IsActive;
+		bool isActive = base.IsActive;
 		Microsoft.Xna.Framework.Rectangle[] array = new Microsoft.Xna.Framework.Rectangle[6];
 		for (int i = 0; i < array.Length; i++) {
 			array[i] = new Microsoft.Xna.Framework.Rectangle(i * 4, 0, 2, 40);
@@ -49765,7 +_,7 @@
 			if (Main.rain[j].active) {
 				Rain rain = Main.rain[j];
 				spriteBatch.Draw(TextureAssets.Rain.Value, rain.position - screenPosition, array[rain.type], color, rain.rotation, Vector2.Zero, rain.scale, SpriteEffects.None, 0f);
-				if (flag) {
+				if (isActive) {
 					rain.Update();
 				}
 			}
@@ -52052,7 +_,7 @@
 		bool flag = false;
 		Form form = null;
 		if (Platform.IsWindows) {
-			form = (Form)Control.FromHandle(instance.Window.Handle);
+			form = Control.FromHandle(instance.Window.Handle);
 			screenMaximized = form.WindowState == FormWindowState.Maximized;
 			if (screenBorderless && screenMaximized && !graphics.IsFullScreen) {
 				screenMaximized = false;
@@ -52240,5 +_,217 @@
 	public static void WeGameRequireExitGame()
 	{
 		GameAskedToQuit = true;
+	}
+
+	static Main()
+	{
+		string savePath = SavePath;
+		char directorySeparatorChar = Path.DirectorySeparatorChar;
+		Configuration = new Preferences(savePath + directorySeparatorChar + "config.json");
+		string savePath2 = SavePath;
+		directorySeparatorChar = Path.DirectorySeparatorChar;
+		InputProfiles = new Preferences(savePath2 + directorySeparatorChar + "input profiles.json");
+		PendingResolutionWidth = 800;
+		PendingResolutionHeight = 600;
+		invasionProgressMode = 2;
+		HasInteractibleObjectThatIsNotATile = false;
+		npcFrameCount = new int[688] {
+			1, 2, 2, 3, 6, 2, 2, 1, 1, 1,
+			1, 1, 1, 1, 1, 1, 2, 25, 23, 25,
+			21, 15, 26, 2, 10, 1, 16, 16, 16, 3,
+			1, 15, 3, 1, 3, 1, 1, 21, 25, 1,
+			1, 1, 3, 3, 15, 3, 7, 7, 6, 5,
+			6, 5, 3, 3, 23, 6, 3, 6, 6, 2,
+			5, 6, 5, 7, 7, 4, 5, 8, 1, 5,
+			1, 2, 4, 16, 5, 4, 4, 15, 16, 16,
+			16, 2, 4, 6, 6, 18, 16, 1, 1, 1,
+			1, 1, 1, 4, 3, 1, 1, 1, 1, 1,
+			1, 5, 6, 7, 16, 1, 1, 25, 23, 12,
+			20, 21, 1, 2, 2, 3, 6, 1, 1, 1,
+			15, 4, 11, 1, 23, 6, 6, 6, 1, 2,
+			2, 1, 3, 4, 1, 2, 1, 4, 2, 1,
+			15, 3, 25, 4, 5, 7, 3, 2, 12, 12,
+			4, 4, 4, 8, 8, 13, 5, 6, 4, 15,
+			23, 3, 15, 8, 5, 4, 13, 15, 12, 4,
+			14, 14, 3, 2, 5, 3, 2, 3, 23, 5,
+			14, 16, 5, 2, 2, 12, 3, 3, 3, 3,
+			2, 2, 2, 2, 2, 7, 14, 15, 16, 8,
+			3, 15, 15, 16, 2, 3, 20, 25, 23, 26,
+			4, 4, 16, 16, 20, 20, 20, 2, 2, 2,
+			2, 8, 12, 3, 4, 2, 4, 25, 26, 26,
+			6, 3, 3, 3, 3, 3, 5, 4, 4, 5,
+			4, 6, 7, 15, 4, 7, 6, 1, 1, 2,
+			4, 3, 5, 3, 3, 3, 4, 5, 6, 4,
+			2, 1, 8, 4, 4, 1, 8, 1, 4, 15,
+			15, 15, 15, 15, 15, 16, 15, 15, 15, 15,
+			15, 3, 3, 3, 3, 3, 3, 16, 3, 6,
+			12, 21, 21, 20, 16, 15, 15, 5, 5, 6,
+			6, 5, 2, 7, 2, 6, 6, 6, 6, 6,
+			15, 15, 15, 15, 15, 11, 4, 2, 2, 3,
+			3, 3, 16, 15, 16, 10, 14, 12, 1, 10,
+			8, 3, 3, 2, 2, 2, 2, 7, 15, 15,
+			15, 6, 3, 10, 10, 6, 9, 8, 9, 8,
+			20, 10, 6, 23, 1, 4, 24, 2, 4, 6,
+			6, 13, 15, 15, 15, 15, 4, 4, 26, 23,
+			8, 2, 4, 4, 4, 4, 2, 2, 4, 12,
+			12, 9, 9, 9, 1, 9, 11, 2, 2, 9,
+			5, 6, 4, 18, 8, 11, 1, 4, 5, 8,
+			4, 1, 1, 1, 1, 4, 2, 5, 4, 11,
+			5, 11, 1, 1, 1, 10, 10, 15, 8, 17,
+			6, 6, 1, 12, 12, 13, 15, 9, 5, 10,
+			7, 7, 7, 7, 7, 7, 7, 4, 4, 16,
+			16, 25, 5, 7, 3, 13, 2, 6, 2, 19,
+			19, 19, 20, 26, 3, 1, 1, 1, 1, 1,
+			16, 21, 9, 16, 7, 6, 18, 13, 20, 12,
+			12, 20, 6, 14, 14, 14, 14, 6, 1, 3,
+			25, 19, 20, 22, 2, 4, 4, 4, 11, 9,
+			8, 1, 9, 1, 8, 8, 12, 12, 11, 11,
+			11, 11, 11, 11, 11, 11, 11, 1, 6, 9,
+			1, 1, 1, 1, 1, 1, 4, 1, 10, 1,
+			8, 4, 1, 5, 8, 8, 8, 8, 9, 9,
+			5, 4, 8, 16, 8, 2, 3, 3, 6, 6,
+			7, 13, 4, 4, 4, 4, 1, 1, 1, 8,
+			25, 11, 14, 14, 14, 17, 17, 17, 5, 5,
+			5, 14, 14, 14, 9, 9, 9, 9, 17, 17,
+			16, 16, 18, 18, 10, 10, 10, 10, 4, 1,
+			6, 9, 6, 4, 4, 4, 14, 4, 25, 13,
+			3, 7, 6, 6, 1, 4, 4, 4, 4, 4,
+			4, 4, 15, 15, 8, 8, 2, 6, 15, 15,
+			6, 13, 5, 5, 7, 5, 14, 14, 4, 6,
+			21, 1, 1, 1, 11, 12, 6, 6, 17, 6,
+			16, 21, 16, 23, 5, 16, 2, 28, 28, 6,
+			6, 6, 6, 6, 6, 6, 7, 7, 7, 7,
+			7, 7, 7, 3, 4, 6, 27, 16, 2, 2,
+			4, 3, 4, 23, 6, 1, 1, 2, 8, 8,
+			14, 6, 6, 6, 6, 6, 2, 4, 14, 14,
+			14, 14, 14, 14, 14, 1, 1, 13
+		};
+		npcLifeBytes = new Dictionary<int, byte>();
+		exitScale = 0.8f;
+		reforgeScale = 0.8f;
+		clientPlayer = new Player();
+		getIP = defaultIP;
+		getPort = Convert.ToString(Netplay.ListenPort);
+		maxNPCUpdates = 5;
+		maxItemUpdates = 5;
+		cUp = "W";
+		cLeft = "A";
+		cDown = "S";
+		cRight = "D";
+		cJump = "Space";
+		cThrowItem = "T";
+		cHeal = "H";
+		cMana = "J";
+		cBuff = "B";
+		cHook = "E";
+		cTorch = "LeftShift";
+		cInv = "Escape";
+		cSmart = "LeftControl";
+		cMount = "R";
+		cFavoriteKey = "LeftAlt";
+		cSmartCursorModeIsToggleAndNotHold = true;
+		SmartCursorWanted_Mouse = false;
+		SmartCursorWanted_GamePad = false;
+		SmartCursorShowing = false;
+		SmartInteractTileCoords = new List<Microsoft.Xna.Framework.Point>();
+		SmartInteractTileCoordsSelected = new List<Microsoft.Xna.Framework.Point>();
+		TileInteractionLX = -1;
+		TileInteractionLY = -1;
+		TileInteractionHX = -1;
+		TileInteractionHY = -1;
+		cursorOverride = -1;
+		signHover = -1;
+		cMapZoomIn = "Add";
+		cMapZoomOut = "Subtract";
+		cMapAlphaUp = "PageUp";
+		cMapAlphaDown = "PageDown";
+		cMapFull = "M";
+		cMapStyle = "Tab";
+		FavoriteKey = Microsoft.Xna.Framework.Input.Keys.LeftAlt;
+		mouseColorSlider = new ColorSlidersSet();
+		mouseBorderColorSlider = new ColorSlidersSet();
+		mouseColor = new Microsoft.Xna.Framework.Color(255, 50, 95);
+		cursorColor = Microsoft.Xna.Framework.Color.White;
+		cursorColorDirection = 1;
+		signX = 0;
+		signY = 0;
+		FrameSkipMode = FrameSkipMode.Subtle;
+		terrariasFixedTiming = true;
+		ParticleSystem_World_OverPlayers = new ParticleRenderer();
+		ParticleSystem_World_BehindPlayers = new ParticleRenderer();
+		shouldSetDefaultUIScale = true;
+		newDefaultUIScale = 0f;
+		startFullscreen = false;
+		oldStatusText = "";
+		autoGenFileLocation = null;
+		splashTimer = new Stopwatch();
+		PreventUpdatingTargets = true;
+		_shouldUseWindyDayMusic = false;
+		_shouldUseStormMusic = false;
+		_minWind = 0.34f;
+		_maxWind = 0.4f;
+		_minRain = 0.4f;
+		_maxRain = 0.5f;
+		ambientWaterfallX = -1f;
+		ambientWaterfallY = -1f;
+		ambientWaterfallStrength = 0f;
+		ambientLavafallX = -1f;
+		ambientLavafallY = -1f;
+		ambientLavafallStrength = 0f;
+		ambientLavaX = -1f;
+		ambientLavaY = -1f;
+		_isWaterfallMusicPlaying = false;
+		_isLavafallMusicPlaying = false;
+		chatMonitor = new RemadeChatMonitor();
+		ProjectileUpdateLoopIndex = -1;
+		weatherVaneBobframe = 0;
+		maxMenuItems = 16;
+		selectedPlayer = 0;
+		_needsLanguageSelect = true;
+		tooltipPrefixComparisonItem = new Item();
+		newWorldName = "";
+		shimmerShine = new Vector3(1f, 0.5f, 1f);
+		specX = new int[1000];
+		specY = new int[1000];
+		_multiplyBlendState = null;
+		_tempSeededRandom = new UnifiedRandom();
+		_lastHoveredLoadoutIndex = -1;
+		_requiredObjecsForCraftingText = new List<string>();
+		_currentRecipeBeingCrafted = -1;
+		hidePVPIcons = false;
+		hoverItemName = "";
+		inventoryBack = new Microsoft.Xna.Framework.Color(220, 220, 220, 220);
+		oldClothesColor = new Microsoft.Xna.Framework.Color[6];
+		_cannotDrawAccessoriesHorizontally = false;
+		selColor = Microsoft.Xna.Framework.Color.White;
+		setKey = -1;
+		menuFocus = 0;
+		hBar = -1f;
+		sBar = -1f;
+		lBar = 1f;
+		aBar = 1f;
+		GamepadCursorAlpha = 0f;
+		MenuXMovement = 0f;
+		InitialMapScale = 1f;
+		MapScale = 1f;
+		_minimapTopRightAnchorOffsetTowardsLeft = 52;
+		_minimapTopRightAnchorOffsetTowardsBottom = 90;
+		cancelWormHole = false;
+		_glowPaintColors = new VertexColors(Microsoft.Xna.Framework.Color.White);
+		lightningDecay = 1f;
+		lightningSpeed = 0f;
+		MonolithFilterNames = new string[5] { "MonolithVortex", "MonolithNebula", "MonolithStardust", "MonolithSolar", "MonolithMoonLord" };
+		MonolithSkyNames = new string[5] { "MonolithVortex", "MonolithNebula", "MonolithStardust", "MonolithSolar", "MonolithMoonLord" };
+		backgroundLayerTransitionSpeed = 0.05f;
+		bgScale = 1f;
+		bgWidthScaled = (int)(1024f * bgScale);
+		ColorOfSurfaceBackgroundsBase = Microsoft.Xna.Framework.Color.White;
+		ColorOfSurfaceBackgroundsModified = Microsoft.Xna.Framework.Color.White;
+		ContentThatNeedsRenderTargets = new List<INeedRenderTargetContent>();
+		_cameraPanHasBlackTransition = false;
+		starGame = false;
+		starsHit = 0;
+		ladyBugRainBoost = 0;
+		_isResizingAndRemakingTargets = false;
 	}
 }
